using BPayPOCns.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

using Newtonsoft.Json;
using Xamarin.Essentials;

namespace BPayPOCns.Views.AdobeDesign
{
    /// <summary>
    /// Interaction logic for samsung_galaxy_s10___1.xaml
	/// Generated by Export Kit - Lightning Storm.
    /// </summary>
    public partial class Client : ContentPage
    {
         

        public Client()
        {
            InitializeComponent();
            CargarDatosDeAPI();

             

            // Agregar el evento Click al boton "Procesar"
            // btnProcesar.Clicked += BtnAbrirPaginaWeb_Click;
        }


        private async void CargarDatosDeAPI()
        {
            try
            {
                //to test with the emulator
                //rs, string url = "http://10.0.2.2:5089/api/Archivo/Ver_archivos/";
                //string url = "http://BPPayServer:5089/api/Archivo/Ver_archivos/";
                //string url = "http://192.168.1.89:5089/api/Archivo/Ver_archivos/";
                //for IIS express
                string url = "http://192.168.1.89:20376/api/Archivo/Ver_archivos/";
                

                HttpClient client = new HttpClient();
                HttpResponseMessage response = await client.GetAsync(url);

                if (response.IsSuccessStatusCode)
                {
                    string json = await response.Content.ReadAsStringAsync();

                    // Obtener y deserializar los datos de la API
                    List<TablaItem> tablaItems = JsonConvert.DeserializeObject<List<TablaItem>>(json);

                    var tablaGrid = new Grid();
                    tablaGrid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });

                    // Encabezados de la tabla
                    tablaGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(200) });
                    tablaGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(200) });
                    tablaGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(200) });
                    tablaGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(200) });
                    tablaGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(200) });
                    tablaGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(200) });
                    tablaGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(200) });

                    // Agregar encabezados
                    tablaGrid.Children.Add(new Label { Text = "Su Pago", FontAttributes = FontAttributes.Bold, FontSize = 18, TextColor = Color.Orange, HorizontalTextAlignment = TextAlignment.Center }, 0, 0);
                    tablaGrid.Children.Add(new Label { Text = "Unidad", FontAttributes = FontAttributes.Bold, FontSize = 18, TextColor = Color.Orange, HorizontalTextAlignment = TextAlignment.Center }, 1, 0);
                    tablaGrid.Children.Add(new Label { Text = "Fecha", FontAttributes = FontAttributes.Bold, FontSize = 18, TextColor = Color.Orange, HorizontalTextAlignment = TextAlignment.Center }, 2, 0);
                    tablaGrid.Children.Add(new Label { Text = "Cantidad Original", FontAttributes = FontAttributes.Bold, FontSize = 18, TextColor = Color.Orange, HorizontalTextAlignment = TextAlignment.Center }, 3, 0);
                    tablaGrid.Children.Add(new Label { Text = "Balance", FontAttributes = FontAttributes.Bold, FontSize = 18, TextColor = Color.Orange, HorizontalTextAlignment = TextAlignment.Center }, 4, 0);
                    tablaGrid.Children.Add(new Label { Text = "Concepto", FontAttributes = FontAttributes.Bold, FontSize = 18, TextColor = Color.Orange, HorizontalTextAlignment = TextAlignment.Center }, 5, 0);
                    tablaGrid.Children.Add(new Label { Text = "Descripcion", FontAttributes = FontAttributes.Bold, FontSize = 18, TextColor = Color.Orange, HorizontalTextAlignment = TextAlignment.Center }, 6, 0);

                    // Filas de datos
                    for (int i = 0; i < tablaItems.Count; i++)
                    {
                        var item = tablaItems[i]; // Obtener los elementos que deseas mostrar

                        // Agregar etiquetas con los datos en la tabla
                         
                        tablaGrid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
                        tablaGrid.Children.Add(new Label { Text = item.Columna_su_pago.ToString(), FontSize = 18, TextColor = Color.Black, HorizontalTextAlignment = TextAlignment.Center }, 0, i + 1);
                        tablaGrid.Children.Add(new Label { Text = item.Columna_unidad.ToString(), FontSize = 18, TextColor = Color.Black, HorizontalTextAlignment = TextAlignment.Center }, 1, i + 1);
                        tablaGrid.Children.Add(new Label { Text = item.Columna_fecha.ToString("dd/MM/yyyy"), FontSize = 18, TextColor = Color.Black, HorizontalTextAlignment = TextAlignment.Center }, 2, i + 1);
                        tablaGrid.Children.Add(new Label { Text = item.Columna_cantidad_original.ToString(), FontSize = 18, TextColor = Color.Black, HorizontalTextAlignment = TextAlignment.Center }, 3, i + 1);
                        tablaGrid.Children.Add(new Label { Text = item.Columna_balance.ToString(), FontSize = 18, TextColor = Color.Black, HorizontalTextAlignment = TextAlignment.Center }, 4, i + 1);
                        tablaGrid.Children.Add(new Label { Text = item.Columna_concepto, FontSize = 18, TextColor = Color.Black, HorizontalTextAlignment = TextAlignment.Center }, 5, i + 1);
                        tablaGrid.Children.Add(new Label { Text = item.Columna_descripcion, FontSize = 18, TextColor = Color.Black, HorizontalTextAlignment = TextAlignment.Center }, 6, i + 1);
                    }

                    // Nueva fila con campo numerico en la primera columna
                    tablaGrid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
                    tablaGrid.Children.Add(new Entry { Placeholder = "$", Keyboard = Keyboard.Numeric, BackgroundColor=Color.DarkGreen}, 0, tablaItems.Count + 1);


                    tablaContainer.Content = new StackLayout
                    {
                        Children = { new ScrollView { Content = tablaGrid } }
                    };

                    // Agregar la tabla a la interfaz (suponiendo que tengas un contenedor llamado "tablaContainer" en tu interfaz)
                    //tablaContainer.Content = new ScrollView { Content = tablaGrid };
                }
                else
                {
                    await DisplayAlert("Error", "No se pudo obtener los datos de la API.", "Aceptar");
                }
            }
            catch (Exception ex)
            {
               // await DisplayAlert("Error", ex.Message, "Aceptar");
            }
        }


        //// ir a un sitio web a traves del boton procesar
        ///

        // Agregar el evento Click al boton "Procesar"
        /* private async void BtnAbrirPaginaWeb_Click(object sender, EventArgs e)
         {
             string url = "https://www.google.com/search?q=asd&oq=asd&aqs=chrome.0.69i59j69i57j0i271l2.527j0j7&sourceid=chrome&ie=UTF-8";

             try
             {
                 await Launcher.OpenAsync(new Uri(url));
             }
             catch (Exception ex)
             {
                 await DisplayAlert("Error", "No se pudo abrir la página web.", "Aceptar");
             }
         }*/

         private async void OnProcesarClicked(object sender, EventArgs e)
         { // Muestra la vista de espera


            // Navega a la siguiente pagina despues de que la carga este completa
                  
             await Navigation.PushAsync(new PaymentScreen());

         }
    }
}
	